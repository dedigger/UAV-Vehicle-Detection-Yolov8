# Ultralytics 🚀 AGPL-3.0 License - https://ultralytics.com/license

# Ultralytics YOLOv8 object detection model with P3/8 - P5/32 outputs
# Model docs: https://docs.ultralytics.com/models/yolov8
# Task docs: https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024] # YOLOv8n summary: 129 layers, 3157200 parameters, 3157184 gradients, 8.9 GFLOPS
  s: [0.33, 0.50, 1024] # YOLOv8s summary: 129 layers, 11166560 parameters, 11166544 gradients, 28.8 GFLOPS
  m: [0.67, 0.75, 768] # YOLOv8m summary: 169 layers, 25902640 parameters, 25902624 gradients, 79.3 GFLOPS
  l: [1.00, 1.00, 512] # YOLOv8l summary: 209 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPS
  x: [1.00, 1.25, 512] # YOLOv8x summary: 209 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPS

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 3, C2f, [128, True]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  - [-1, 6, C2f, [256, True]]
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
  - [-1, 6, C2f, [512, True]]
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
#  - [-1, 3, C2f_DCN, [1024, True]]
#有GPU的电脑注释下面一行，使用上面一行
  - [-1, 3, C2f, [1024, True]]
  - [-1, 1, SPPF_LSKA, [1024, 5]] # 9

head:

    - [ -1, 1, Conv, [ 512, 3, 2 ] ]  # 10: 1024→512 (20x20→10x10)


    - [ -1, 1, nn.Upsample, [ None, 2, "nearest" ] ]  # 11: 10x10→20x20
    - [ [ -1, 7 ], 1, Concat, [ 1 ] ]    # 12: [512,1024] → 1536通道 (20x20)
    - [ -1, 3, C2f, [ 512 ] ]          # 13: 1536→512 (20x20)


    - [ -1, 1, nn.Upsample, [ None, 2, "nearest" ] ]  # 14: 20x20→40x40
    - [ [ -1, 5 ], 1, Concat, [ 1 ] ]    # 15: [512,512] → 1024通道 (40x40)
    - [ -1, 3, C2f, [ 256 ] ]          # 16: 1024→256 (40x40)


    - [ -1, 1, Conv, [ 256, 3, 2 ] ]   # 17: 256→256 (40x40→20x20)
    - [ [ -1, 13 ], 1, Concat, [ 1 ] ]   # 18: [256,512] → 768通道 (20x20)
    - [ -1, 3, C2f, [ 512 ] ]          # 19: 768→512 (20x20)


    - [ -1, 1, Conv, [ 512, 3, 2 ] ]   # 20: 512→512 (20x20→10x10)
    - [ [ -1, 10 ], 1, Concat, [ 1 ] ]   # 21: [512,512] → 1024通道 (10x10)
    - [ -1, 3, C2f, [ 1024 ] ]         # 22: 1024→1024 (10x10)


    - [ [ 16, 19, 22 ], 1, Detect, [ nc ] ]  # 输入尺寸对应[40x40,20x20,10x10]

## v1.0
#head:
#  - [ -1, 1, Conv, [ 1024, 3, 2 ] ]
#  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#  - [[-1, 7], 1, Concat, [1]]
#  - [-1, 3, C2f, [512]] # 13
#
#  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#  - [[-1, 5], 1, Concat, [1]] #
#  - [-1, 3, C2f, [512]] # 16
#
#  - [3, 1, Conv, [512, 3, 2]]
#  - [[-1, -2,5], 1, Concat, [1]] #
#  - [-1, 3, C2f, [512]] # 19
#
#  - [-1, 1, Conv, [512, 3, 2]]
#  - [[-1, 7,12], 1, Concat, [1]] #
#  - [-1, 3, C2f, [1024]] # 21
#  - [-1, 1, Conv, [1024, 3, 2]]
#  - [[-1, 10], 1, Concat, [1]]
#  - [-1, 3, C2f, [1024]]#24
#
#  - [[18, 21, 24], 1, Detect, [nc]]
